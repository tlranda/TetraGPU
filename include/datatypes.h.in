#ifndef TETRA_DATA_TYPES
#define TETRA_DATA_TYPES

#include <vtkCellTypes.h> // VTK Id Types etc
#include <bitset> // std::bitset

#cmakedefine VALIDATE_GPU

/*
 * Data types for relationships and retrieved data
 * TV relationship: TV_Data
     * Cell: vtkIDType (from VTK, integer-type)
     * Vertex: vtkIDType (from VTK, integer-type)
 * Edge: EdgeData (high vertex & edge ID (arbitrarily enumerated))
     * TE relationship: TE_Data (map cell ID to its 6 edge IDs)
     * EV relationship: EV_Data (map edge ID to its 2 vertex IDs)
     * ET relationship: ET_Data (map edge ID to an arbitrary number of cell IDs)
     * VE relationship: VE_Data (map low vertex ID to edge data including other vertex)
 * Face: FaceData (arbitrarily enumerated by increasing vertex IDs, with face ID)
     * TF relationship: TF_Data (map cell ID to its 4 face IDs)
     * VF relationship: VF_Data (map low vertex ID to face data including other vertices)
 */

// Tetrahedron geometry constants
const int nbVertsInCell = 4; // verifiable at VTK load via VTK offsets[1]-offsets[0]
const int nbEdgesInCell = 6;
const int nbFacesInCell = 4;
const int nbVertsInEdge = 2;
const int nbVertsInFace = 3;

struct EdgeData {
    vtkIdType highVert = 0, // edge's higher vertex id
              id = 0;       // edge's id
    EdgeData(vtkIdType hv, vtkIdType i) : highVert{hv}, id{i} {}
};
struct FaceData {
    vtkIdType middleVert = 0, // face's second vertex id
              highVert = 0,   // faces highest vertex id
              id = 0;         // face's id
    FaceData(vtkIdType mv, vtkIdType hv, vtkIdType i) : middleVert{mv},
                                                        highVert{hv}, id{i} {}
};
struct TV_Data {
    vtkIdType nPoints, nCells;
    // For some reason, vector of array is experimentally 20x faster than unique_ptr?
    //std::unique_ptr<vtkIdType[]> cells;
    std::vector<std::array<vtkIdType,nbVertsInCell>> cells;

    TV_Data(vtkIdType _points, vtkIdType _cells) {
        nPoints = _points;
        nCells = _cells;
        //cells = std::make_unique<vtkIdType[]>(_points * _cells);
        cells.resize(nCells);
    }

    // Foreach iterators go over the cells vector
    std::vector<std::array<vtkIdType,nbVertsInCell>>::iterator begin() {
        return cells.begin();
    }
    std::vector<std::array<vtkIdType,nbVertsInCell>>::const_iterator begin() const {
        return cells.begin();
    }
    std::vector<std::array<vtkIdType,nbVertsInCell>>::iterator end() {
        return cells.end();
    }
    std::vector<std::array<vtkIdType,nbVertsInCell>>::const_iterator end() const {
        return cells.end();
    }
};

// Required precomputes for IDs with inherited spatial locality from TV relationship
typedef std::vector<std::array<vtkIdType,nbEdgesInCell>> TE_Data;
typedef std::vector<std::vector<EdgeData>> VE_Data;
typedef std::vector<std::array<vtkIdType,nbFacesInCell>> TF_Data;
typedef std::vector<std::vector<FaceData>> VF_Data;

// Elective precomputes
typedef std::vector<std::array<vtkIdType,nbVertsInEdge>> EV_Data;
typedef std::vector<std::vector<vtkIdType>> ET_Data;
typedef std::vector<FaceData> FV_Data; // DUMMY
typedef std::vector<FaceData> FE_Data; // DUMMY

// Argument values to be stored here, with defaults if they are optional
typedef struct argstruct {
    std::string fileName;
    int threadNumber = 1;
    std::bitset<7> arg_flags;
    bool validate(void) const { return arg_flags[0]; }
    bool build_TE(void) const { return arg_flags[1]; }
    bool build_EV(void) const { return arg_flags[2]; }
    bool build_ET(void) const { return arg_flags[3]; }
    bool build_TF(void) const { return arg_flags[4]; }
    bool build_FV(void) const { return arg_flags[5]; }
    bool build_FE(void) const { return arg_flags[6]; }
         /* MIA
         build_FT
         build_EF
         build_VT
         build_TT
         build_FF
         build_EE
         build_VV
         */
} arguments;
typedef std::map<const char*, std::string> option_map;

#endif

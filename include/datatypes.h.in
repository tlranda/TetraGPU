#ifndef TETRA_DATA_TYPES
#define TETRA_DATA_TYPES

#include <vtkCellTypes.h> // VTK Id Types etc
#include <bitset> // std::bitset
#include <memory> // std::unique_ptr

#cmakedefine VALIDATE_GPU

/*
 * Data types for relationships and retrieved data
 * TV relationship: TV_Data
     * Cell: vtkIDType (from VTK, integer-type)
     * Vertex: vtkIDType (from VTK, integer-type)
 * Edge: EdgeData (high vertex & edge ID (arbitrarily enumerated))
     * TE relationship: TE_Data (map cell ID to its 6 edge IDs)
     * EV relationship: EV_Data (map edge ID to its 2 vertex IDs)
     * ET relationship: ET_Data (map edge ID to an arbitrary number of cell IDs)
     * VE relationship: VE_Data (map low vertex ID to edge data including other vertex)
 * Face: FaceData (arbitrarily enumerated by increasing vertex IDs, with face ID)
     * TF relationship: TF_Data (map cell ID to its 4 face IDs)
     * VF relationship: VF_Data (map low vertex ID to face data including other vertices)
 * Adjacency: Vector of vectors of IDs
     * VV relationship: VV_Data
     * EE relationship: EE_Data
     * FF relationship: FF_Data
     * TT relationship: TT_Data
 */

// Tetrahedron geometry constants
const int nbVertsInCell = 4; // verifiable at VTK load via VTK offsets[1]-offsets[0]
const int nbVertsInFace = 3;
const int nbVertsInEdge = 2;
const int nbEdgesInCell = 6;
const int nbEdgesInFace = 3;
const int nbFacesInCell = 4;

struct EdgeData {
    vtkIdType highVert = 0, // edge's higher vertex id
              id = 0;       // edge's id
    EdgeData(vtkIdType hv, vtkIdType i) : highVert{hv}, id{i} {}
    EdgeData() : highVert{0}, id{0} {}
};
struct FaceData {
    vtkIdType middleVert = 0, // face's second vertex id
              highVert = 0,   // faces highest vertex id
              id = 0;         // face's id, or when representing FV the lowest vertex id
    FaceData(vtkIdType mv, vtkIdType hv, vtkIdType i) : middleVert{mv},
                                                        highVert{hv}, id{i} {}
    FaceData() : middleVert{0}, highVert{0}, id{0} {}
    bool operator==(const FaceData& rhs) {
        return (this->id == rhs.id &&
                this->middleVert == rhs.middleVert &&
                this->highVert == rhs.highVert);
    }
};
struct TV_Data {
    vtkIdType nPoints, nCells;
    // For some reason, vector of array is experimentally 20x faster than unique_ptr?
    //std::unique_ptr<vtkIdType[]> cells;
    std::vector<std::array<vtkIdType,nbVertsInCell>> cells;
    std::vector<double> vertexAttributes;

    TV_Data(vtkIdType _points, vtkIdType _cells) {
        nPoints = _points;
        nCells = _cells;
        //cells = std::make_unique<vtkIdType[]>(_points * _cells);
        cells.resize(nCells);
    }

    // Foreach iterators go over the cells vector
    std::vector<std::array<vtkIdType,nbVertsInCell>>::iterator begin() {
        return cells.begin();
    }
    std::vector<std::array<vtkIdType,nbVertsInCell>>::const_iterator begin() const {
        return cells.begin();
    }
    std::vector<std::array<vtkIdType,nbVertsInCell>>::iterator end() {
        return cells.end();
    }
    std::vector<std::array<vtkIdType,nbVertsInCell>>::const_iterator end() const {
        return cells.end();
    }
};
typedef struct deviceVV {
    vtkIdType * computed;
    unsigned long long int * index;
    deviceVV() {
        computed = nullptr;
        index = nullptr;
    }
    deviceVV(vtkIdType * c, unsigned long long int * i) {
        computed = c; index = i;
    }
    /*
    ~deviceVV(void) {
        if (computed != nullptr) CUDA_WARN(cudaFree(computed));
        if (index != nullptr) CUDA_WARN(cudaFree(computed));
    }
    */
} device_VV;
typedef struct deviceVT {
    vtkIdType * computed;
    unsigned long long int * index;
    deviceVT() {
        computed = nullptr;
        index = nullptr;
    }
    deviceVT(vtkIdType * c, unsigned long long int * i) {
        computed = c; index = i;
    }
} device_VT;

// Required precomputes for IDs with inherited spatial locality from TV relationship
typedef std::vector<std::array<vtkIdType,nbEdgesInCell>> TE_Data;
typedef std::vector<std::vector<EdgeData>> VE_Data;
typedef std::vector<std::array<vtkIdType,nbFacesInCell>> TF_Data;
typedef std::vector<std::vector<FaceData>> VF_Data;

// Elective precomputes
typedef std::vector<std::array<vtkIdType,nbVertsInEdge>> EV_Data;
typedef std::vector<std::vector<vtkIdType>> ET_Data;
typedef std::vector<FaceData> FV_Data;
typedef std::vector<std::array<EdgeData,nbEdgesInFace>> FE_Data;
typedef std::vector<std::array<vtkIdType,2>> FT_Data;
typedef std::vector<std::vector<vtkIdType>> EF_Data;
typedef std::vector<std::vector<vtkIdType>> VT_Data;

// Adjacency
typedef std::vector<std::vector<vtkIdType>> VV_Data;
typedef std::vector<std::vector<vtkIdType>> EE_Data;
typedef std::vector<std::vector<vtkIdType>> FF_Data;
typedef std::vector<std::vector<vtkIdType>> TT_Data;

// Argument values to be stored here, with defaults if they are optional
typedef struct argstruct {
    std::string fileName = "tiny.vtu";
    int threadNumber = 1;
    std::string export_ = "";
    // Endian-ness may mean defaults need to be set in LSB->MSB order
    // TE starts on 3rd LSB
    std::bitset<14> arg_flags{"10000000000001"};
    std::map<int,std::string> flag_names = {
        {0, "validate"}, // ^*1$
        {1, "TE"},       // ^*1_$
        {2, "EV"},       // ^*1[2_]$
        {3, "ET"},       // ^*1[3_]$
        {4, "TF"},       // ^*1[4_]$
        {5, "FV"},       // ^*1[5_]$
        {6, "FE"},       // ^*1[6_]$
        {7, "FT"},       // ^*1[7_]$
        {8, "EF"},       // ^*1[8_]$
        {9, "VT"},       // ^*1[9_]$
        {10, "TT"},      // ^*1[10_]$
        {11, "FF"},      // ^*1[11_]$
        {12, "EE"},      // ^*1[12_]$
        {13, "VV"}       // ^1[13_]$
        /*
         * Always initialized, ergo not pickable: TV, VF, VE
         */
    };
    bool validate(void) const { return arg_flags[0]; }
    bool build_TE(void) const { return arg_flags[1]; }
    bool build_EV(void) const { return arg_flags[2]; }
    bool build_ET(void) const { return arg_flags[3]; }
    bool build_TF(void) const { return arg_flags[4]; }
    bool build_FV(void) const { return arg_flags[5]; }
    bool build_FE(void) const { return arg_flags[6]; }
    bool build_FT(void) const { return arg_flags[7]; }
    bool build_EF(void) const { return arg_flags[8]; }
    bool build_VT(void) const { return arg_flags[9]; }
    bool build_TT(void) const { return arg_flags[10]; }
    bool build_FF(void) const { return arg_flags[11]; }
    bool build_EE(void) const { return arg_flags[12]; }
    bool build_VV(void) const { return arg_flags[13]; }
} arguments;
typedef std::map<const char*, std::string> option_map;

#endif
